<?php

/**
 * @file
 * Contains ajax_login.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

use Drupal\Core\Ajax\AjaxResponse;

use Drupal\Core\Ajax\ReplaceCommand;

use Drupal\Core\Ajax\OpenModalDialogCommand;

use Drupal\Core\Ajax\RedirectCommand;

use Drupal\ajax_login\Ajax\ReloadCommand;

use Drupal\Core\Url;

use Drupal\Component\Serialization\Json;

use Drupal\ajax_login\AjaxLoginConstants;

/**
 * Implements hook_help().
 */
function ajax_login_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the ajax_login module.
    case 'help.page.ajax_login':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module gives a possibility to login and register by Ajax') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function ajax_login_theme() {
  return [
    'ajax_login'       => [
      'template'       => 'ajax_login',
      'variables'      => ['links' => NULL, 'output_type' => NULL],
      'render element' => 'children',
    ],
    'ajax_login_links' => [
      'template'       => 'ajax_login_links',
      'variables'      => ['links' => NULL],
      'render element' => 'children',
    ],
  ];
}

/**
 * Define changes for standard forms.
 */
function ajax_login_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
    case 'user_pass':
    case 'user_register_form':
      ajax_login_add_ajax_form($form_id, $form);
  }
}

/**
 * Add field to the form.
 */
function ajax_login_add_ajax_form($form_id, &$form) {
  $config      = \Drupal::config('ajax_login.settings');
  $modal_links = ['login', 'register', 'pass'];
  $link_status = $config->get('ajax_login_links');
  if ($link_status) {
    $form['links'] = [
      '#theme'  => 'ajax_login_links',
      '#links'  => ajax_login_links($modal_links, $form_id),
      '#weight' => AjaxLoginConstants::AJAX_LOGIN_OPEN_MODAL_LINKS_WEIGHT,
    ];
  }
  $messages                            = [
    'user_login_form'    => t('Log in ...'),
    'user_register_form' => t('Register ...'),
    'user_pass'          => t('Change password ...'),
  ];
  $form['#prefix']                     = '<div id="modal_ajax_form_' . $form_id . '">';
  $form['#suffix']                     = '</div>';
  $_SESSION['messages']                = [];
  $form['status_messages_' . $form_id] = [
    '#type'   => 'status_messages',
    '#weight' => AjaxLoginConstants::AJAX_LOGIN_OPEN_MODAL_ERROR_WEIGHT,
  ];
  $form['form_id']                     = [
    '#type'  => 'hidden',
    '#value' => $form_id,
  ];
  $form['actions']['submit']['#ajax']  = [
    'callback'    => 'ajax_login_form_ajax_validate',
    'event'       => 'click',
    '#attributes' => [
      'class' => [
        'use-ajax',
      ],
    ],
    'progress'    => [
      'type'    => 'throbber',
      'message' => $messages[$form_id],
    ],
  ];
  $form['#attached']['library'][]      = 'core/drupal.dialog.ajax';
  $form['#attached']['library'][]      = 'ajax_login/ajax_login.commands';
  return $form;
}

/**
 * Define a validation for forms.
 */
function ajax_login_form_ajax_validate(&$form, $form_state) {
  $response = new AjaxResponse();
  $form_id = $form_state->getUserInput()['form_id'];
  if ($form_state->hasAnyErrors()) {
    $response->addCommand(new ReplaceCommand('#modal_ajax_form_' . $form_id, $form));
  }
  else {
    ajax_login_form_ajax_response($form_id, $response);
  }
  return $response;
}

/**
 * Define responses.
 */
function ajax_login_form_ajax_response($form_id, $response) {
  $config            = \Drupal::config('ajax_login.settings');
  $options           = [
    'width'  => $config->get('open_dialog_width'),
    'height' => $config->get('open_dialog_height'),
  ];
  $settings          = [
    'user_login_form'    => [
      'type'    => 'login',
      'title'   => t('Successful login'),
      'message' => t('Successful login. Now the page will be redirected.'),
      'refresh' => t('Successful login. Now the page will be reloaded.'),
    ],
    'user_pass'          => [
      'type'    => 'password',
      'title'   => t('Password request'),
      'message' => t('Further instructions have been sent to your email address.'),
      'refresh' => t('Further instructions have been sent to your email address. Now the page will be reloaded.'),
    ],
    'user_register_form' => [
      'type'    => 'register',
      'title'   => t('Creation of new account'),
      'message' => t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.
                                                                                                                 In the meantime, a welcome message with further instructions has been sent to your email address.'),
      'refresh' => t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.
                                                                                                                 In the meantime, a welcome message with further instructions has been sent to your email address. Page will be reloaded.'),
    ],
  ];
  $redirect_settings = $config->get('ajax_redirect_' . $settings[$form_id]['type'] . '_settings');
  $redirect_url      = $config->get('ajax_redirect_' . $settings[$form_id]['type'] . '_url');
  $title             = $settings[$form_id]['title'];
  switch ($form_id) {
    case 'user_login_form':
    case 'user_pass':
      $redirect_url_default = URL::fromRoute('user.page')
        ->toString();
      break;

    case 'user_register_form':
      $redirect_url_default = URL::fromRoute('<front>')
        ->toString();
      break;
  }
  if ($redirect_settings == 'default' && !empty($redirect_url_default)) {
    $message = $settings[$form_id]['message'];
    $response->addCommand(new OpenModalDialogCommand($title, $message, $options));
    $response->addCommand(new RedirectCommand($redirect_url_default));
  }
  elseif ($redirect_settings == 'custom' && !empty($redirect_url)) {
    $message = $settings[$form_id]['message'];
    $response->addCommand(new OpenModalDialogCommand($title, $message, $options));
    $response->addCommand(new RedirectCommand($redirect_url));
  }
  elseif ($redirect_settings == 'refresh') {
    $message = $settings[$form_id]['refresh'];
    $response->addCommand(new OpenModalDialogCommand($title, $message, $options));
    $response->addCommand(new ReloadCommand());
  }
  elseif ($redirect_settings == 'none' && $form_id != 'user_login_form') {
    $message = $settings[$form_id]['message'];
    $response->addCommand(new OpenModalDialogCommand($title, $message, $options));
  }
  return $response;
}

/**
 * Define the list of links.
 */
function ajax_login_links($modal_links, $form_id = NULL) {
  $config   = \Drupal::config('ajax_login.settings');
  $settings = [
    'user_login_form'    => [
      'title' => t('Login'),
      'type'  => 'login',
    ],
    'user_pass'          => [
      'title' => t('Reset your password'),
      'type'  => 'pass',
    ],
    'user_register_form' => [
      'title' => t('Create new account'),
      'type'  => 'register',
    ],
  ];
  $links    = [];
  foreach ($settings as $form_id_link => $link) {
    if ($form_id_link == $form_id || !in_array($link['type'], $modal_links)) {
      continue;
    }
    $links[$link['type']] = [
      '#type'     => 'link',
      '#title'    => $link['title'],
      '#url'      => Url::fromRoute('user.' . $link['type']),
      '#options'  => [
        'attributes' => [
          'class'               => ['use-ajax', 'ajax-' . $link['type']],
          'data-dialog-type'    => 'modal',
          'data-dialog-options' => Json::encode([
            'width' => $config->get('ajax_modal_width'),
          ]),
        ],
      ],
      '#attached' => ['library' => ['core/drupal.dialog.ajax']],
    ];
  }
  return $links;
}
